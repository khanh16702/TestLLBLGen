//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.11.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using TestLLBL.HelperClasses;
using TestLLBL.FactoryClasses;
using TestLLBL.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace TestLLBL.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END

	/// <summary>Entity class which represents the entity 'PlanDetail'.<br/><br/></summary>
	[Serializable]
	public partial class PlanDetailEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END
	
	{
		private EntityCollection<TaskEntity> _tasks;
		private PlanEntity _plan;
		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END

		private static PlanDetailEntityStaticMetaData _staticMetaData = new PlanDetailEntityStaticMetaData();
		private static PlanDetailRelations _relationsFactory = new PlanDetailRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Plan</summary>
			public static readonly string Plan = "Plan";
			/// <summary>Member name Tasks</summary>
			public static readonly string Tasks = "Tasks";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class PlanDetailEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public PlanDetailEntityStaticMetaData()
			{
				SetEntityCoreInfo("PlanDetailEntity", InheritanceHierarchyType.None, false, (int)TestLLBL.EntityType.PlanDetailEntity, typeof(PlanDetailEntity), typeof(PlanDetailEntityFactory), false);
				AddNavigatorMetaData<PlanDetailEntity, EntityCollection<TaskEntity>>("Tasks", a => a._tasks, (a, b) => a._tasks = b, a => a.Tasks, () => new PlanDetailRelations().TaskEntityUsingPlanDetailId, typeof(TaskEntity), (int)TestLLBL.EntityType.TaskEntity);
				AddNavigatorMetaData<PlanDetailEntity, PlanEntity>("Plan", "PlanDetails", (a, b) => a._plan = b, a => a._plan, (a, b) => a.Plan = b, TestLLBL.RelationClasses.StaticPlanDetailRelations.PlanEntityUsingPlanIdStatic, ()=>new PlanDetailRelations().PlanEntityUsingPlanId, null, new int[] { (int)PlanDetailFieldIndex.PlanId }, null, true, (int)TestLLBL.EntityType.PlanEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static PlanDetailEntity()
		{
		}

		/// <summary> CTor</summary>
		public PlanDetailEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public PlanDetailEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this PlanDetailEntity</param>
		public PlanDetailEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for PlanDetail which data should be fetched into this PlanDetail object</param>
		public PlanDetailEntity(System.Int32 id) : this(id, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for PlanDetail which data should be fetched into this PlanDetail object</param>
		/// <param name="validator">The custom validator object for this PlanDetailEntity</param>
		public PlanDetailEntity(System.Int32 id, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.Id = id;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected PlanDetailEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Task' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoTasks() { return CreateRelationInfoForNavigator("Tasks"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Plan' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoPlan() { return CreateRelationInfoForNavigator("Plan"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this PlanDetailEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END


			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static PlanDetailRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Task' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathTasks { get { return _staticMetaData.GetPrefetchPathElement("Tasks", CommonEntityBase.CreateEntityCollection<TaskEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Plan' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathPlan { get { return _staticMetaData.GetPrefetchPathElement("Plan", CommonEntityBase.CreateEntityCollection<PlanEntity>()); } }

		/// <summary>The CompleteDate property of the Entity PlanDetail<br/><br/></summary>
		/// <remarks>Mapped on  table field: "PlanDetail"."CompleteDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> CompleteDate
		{
			get { return (Nullable<System.DateTime>)GetValue((int)PlanDetailFieldIndex.CompleteDate, false); }
			set { SetValue((int)PlanDetailFieldIndex.CompleteDate, value); }
		}

		/// <summary>The CreatedDate property of the Entity PlanDetail<br/><br/></summary>
		/// <remarks>Mapped on  table field: "PlanDetail"."CreatedDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> CreatedDate
		{
			get { return (Nullable<System.DateTime>)GetValue((int)PlanDetailFieldIndex.CreatedDate, false); }
			set { SetValue((int)PlanDetailFieldIndex.CreatedDate, value); }
		}

		/// <summary>The Id property of the Entity PlanDetail<br/><br/></summary>
		/// <remarks>Mapped on  table field: "PlanDetail"."Id".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 Id
		{
			get { return (System.Int32)GetValue((int)PlanDetailFieldIndex.Id, true); }
			set { SetValue((int)PlanDetailFieldIndex.Id, value); }
		}

		/// <summary>The Name property of the Entity PlanDetail<br/><br/></summary>
		/// <remarks>Mapped on  table field: "PlanDetail"."Name".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 200.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Name
		{
			get { return (System.String)GetValue((int)PlanDetailFieldIndex.Name, true); }
			set { SetValue((int)PlanDetailFieldIndex.Name, value); }
		}

		/// <summary>The PlanId property of the Entity PlanDetail<br/><br/></summary>
		/// <remarks>Mapped on  table field: "PlanDetail"."PlanId".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> PlanId
		{
			get { return (Nullable<System.Int32>)GetValue((int)PlanDetailFieldIndex.PlanId, false); }
			set { SetValue((int)PlanDetailFieldIndex.PlanId, value); }
		}

		/// <summary>The UpdatedDate property of the Entity PlanDetail<br/><br/></summary>
		/// <remarks>Mapped on  table field: "PlanDetail"."UpdatedDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> UpdatedDate
		{
			get { return (Nullable<System.DateTime>)GetValue((int)PlanDetailFieldIndex.UpdatedDate, false); }
			set { SetValue((int)PlanDetailFieldIndex.UpdatedDate, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'TaskEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(TaskEntity))]
		public virtual EntityCollection<TaskEntity> Tasks { get { return GetOrCreateEntityCollection<TaskEntity, TaskEntityFactory>("PlanDetail", true, false, ref _tasks); } }

		/// <summary>Gets / sets related entity of type 'PlanEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual PlanEntity Plan
		{
			get { return _plan; }
			set { SetSingleRelatedEntityNavigator(value, "Plan"); }
		}
		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END


	}
}

namespace TestLLBL
{
	public enum PlanDetailFieldIndex
	{
		///<summary>CompleteDate. </summary>
		CompleteDate,
		///<summary>CreatedDate. </summary>
		CreatedDate,
		///<summary>Id. </summary>
		Id,
		///<summary>Name. </summary>
		Name,
		///<summary>PlanId. </summary>
		PlanId,
		///<summary>UpdatedDate. </summary>
		UpdatedDate,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace TestLLBL.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: PlanDetail. </summary>
	public partial class PlanDetailRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between PlanDetailEntity and TaskEntity over the 1:n relation they have, using the relation between the fields: PlanDetail.Id - Task.PlanDetailId</summary>
		public virtual IEntityRelation TaskEntityUsingPlanDetailId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Tasks", true, new[] { PlanDetailFields.Id, TaskFields.PlanDetailId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between PlanDetailEntity and PlanEntity over the m:1 relation they have, using the relation between the fields: PlanDetail.PlanId - Plan.Id</summary>
		public virtual IEntityRelation PlanEntityUsingPlanId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Plan", false, new[] { PlanFields.Id, PlanDetailFields.PlanId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticPlanDetailRelations
	{
		internal static readonly IEntityRelation TaskEntityUsingPlanDetailIdStatic = new PlanDetailRelations().TaskEntityUsingPlanDetailId;
		internal static readonly IEntityRelation PlanEntityUsingPlanIdStatic = new PlanDetailRelations().PlanEntityUsingPlanId;

		/// <summary>CTor</summary>
		static StaticPlanDetailRelations() { }
	}
}

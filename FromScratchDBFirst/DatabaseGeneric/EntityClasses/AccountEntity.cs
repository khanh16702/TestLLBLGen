//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.11.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using TestLLBL.HelperClasses;
using TestLLBL.FactoryClasses;
using TestLLBL.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace TestLLBL.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END

	/// <summary>Entity class which represents the entity 'Account'.<br/><br/></summary>
	[Serializable]
	public partial class AccountEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END
	
	{
		private EntityCollection<PetitionEntity> _petitions;
		private EntityCollection<ProjectEntity> _projects;
		private EntityCollection<TaskEntity> _tasks;
		private EntityCollection<UnitAndAccountEntity> _unitAndAccounts;
		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END

		private static AccountEntityStaticMetaData _staticMetaData = new AccountEntityStaticMetaData();
		private static AccountRelations _relationsFactory = new AccountRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Petitions</summary>
			public static readonly string Petitions = "Petitions";
			/// <summary>Member name Projects</summary>
			public static readonly string Projects = "Projects";
			/// <summary>Member name Tasks</summary>
			public static readonly string Tasks = "Tasks";
			/// <summary>Member name UnitAndAccounts</summary>
			public static readonly string UnitAndAccounts = "UnitAndAccounts";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class AccountEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public AccountEntityStaticMetaData()
			{
				SetEntityCoreInfo("AccountEntity", InheritanceHierarchyType.None, false, (int)TestLLBL.EntityType.AccountEntity, typeof(AccountEntity), typeof(AccountEntityFactory), false);
				AddNavigatorMetaData<AccountEntity, EntityCollection<PetitionEntity>>("Petitions", a => a._petitions, (a, b) => a._petitions = b, a => a.Petitions, () => new AccountRelations().PetitionEntityUsingAccountId, typeof(PetitionEntity), (int)TestLLBL.EntityType.PetitionEntity);
				AddNavigatorMetaData<AccountEntity, EntityCollection<ProjectEntity>>("Projects", a => a._projects, (a, b) => a._projects = b, a => a.Projects, () => new AccountRelations().ProjectEntityUsingAccountId, typeof(ProjectEntity), (int)TestLLBL.EntityType.ProjectEntity);
				AddNavigatorMetaData<AccountEntity, EntityCollection<TaskEntity>>("Tasks", a => a._tasks, (a, b) => a._tasks = b, a => a.Tasks, () => new AccountRelations().TaskEntityUsingAccountId, typeof(TaskEntity), (int)TestLLBL.EntityType.TaskEntity);
				AddNavigatorMetaData<AccountEntity, EntityCollection<UnitAndAccountEntity>>("UnitAndAccounts", a => a._unitAndAccounts, (a, b) => a._unitAndAccounts = b, a => a.UnitAndAccounts, () => new AccountRelations().UnitAndAccountEntityUsingAccountId, typeof(UnitAndAccountEntity), (int)TestLLBL.EntityType.UnitAndAccountEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static AccountEntity()
		{
		}

		/// <summary> CTor</summary>
		public AccountEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public AccountEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this AccountEntity</param>
		public AccountEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Account which data should be fetched into this Account object</param>
		public AccountEntity(System.Int32 id) : this(id, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Account which data should be fetched into this Account object</param>
		/// <param name="validator">The custom validator object for this AccountEntity</param>
		public AccountEntity(System.Int32 id, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.Id = id;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected AccountEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Petition' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoPetitions() { return CreateRelationInfoForNavigator("Petitions"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Project' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoProjects() { return CreateRelationInfoForNavigator("Projects"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Task' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoTasks() { return CreateRelationInfoForNavigator("Tasks"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'UnitAndAccount' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoUnitAndAccounts() { return CreateRelationInfoForNavigator("UnitAndAccounts"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this AccountEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END


			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static AccountRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Petition' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathPetitions { get { return _staticMetaData.GetPrefetchPathElement("Petitions", CommonEntityBase.CreateEntityCollection<PetitionEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Project' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathProjects { get { return _staticMetaData.GetPrefetchPathElement("Projects", CommonEntityBase.CreateEntityCollection<ProjectEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Task' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathTasks { get { return _staticMetaData.GetPrefetchPathElement("Tasks", CommonEntityBase.CreateEntityCollection<TaskEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'UnitAndAccount' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathUnitAndAccounts { get { return _staticMetaData.GetPrefetchPathElement("UnitAndAccounts", CommonEntityBase.CreateEntityCollection<UnitAndAccountEntity>()); } }

		/// <summary>The Avatar property of the Entity Account<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Account"."Avatar".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 200.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Avatar
		{
			get { return (System.String)GetValue((int)AccountFieldIndex.Avatar, true); }
			set { SetValue((int)AccountFieldIndex.Avatar, value); }
		}

		/// <summary>The CreatedDate property of the Entity Account<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Account"."CreatedDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> CreatedDate
		{
			get { return (Nullable<System.DateTime>)GetValue((int)AccountFieldIndex.CreatedDate, false); }
			set { SetValue((int)AccountFieldIndex.CreatedDate, value); }
		}

		/// <summary>The DisplayName property of the Entity Account<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Account"."DisplayName".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 200.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String DisplayName
		{
			get { return (System.String)GetValue((int)AccountFieldIndex.DisplayName, true); }
			set { SetValue((int)AccountFieldIndex.DisplayName, value); }
		}

		/// <summary>The Email property of the Entity Account<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Account"."Email".<br/>Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 200.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Email
		{
			get { return (System.String)GetValue((int)AccountFieldIndex.Email, true); }
			set { SetValue((int)AccountFieldIndex.Email, value); }
		}

		/// <summary>The Id property of the Entity Account<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Account"."Id".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 Id
		{
			get { return (System.Int32)GetValue((int)AccountFieldIndex.Id, true); }
			set { SetValue((int)AccountFieldIndex.Id, value); }
		}

		/// <summary>The Password property of the Entity Account<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Account"."Password".<br/>Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 200.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Password
		{
			get { return (System.String)GetValue((int)AccountFieldIndex.Password, true); }
			set { SetValue((int)AccountFieldIndex.Password, value); }
		}

		/// <summary>The Username property of the Entity Account<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Account"."Username".<br/>Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 200.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Username
		{
			get { return (System.String)GetValue((int)AccountFieldIndex.Username, true); }
			set { SetValue((int)AccountFieldIndex.Username, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'PetitionEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(PetitionEntity))]
		public virtual EntityCollection<PetitionEntity> Petitions { get { return GetOrCreateEntityCollection<PetitionEntity, PetitionEntityFactory>("Account", true, false, ref _petitions); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'ProjectEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(ProjectEntity))]
		public virtual EntityCollection<ProjectEntity> Projects { get { return GetOrCreateEntityCollection<ProjectEntity, ProjectEntityFactory>("Account", true, false, ref _projects); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'TaskEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(TaskEntity))]
		public virtual EntityCollection<TaskEntity> Tasks { get { return GetOrCreateEntityCollection<TaskEntity, TaskEntityFactory>("Account", true, false, ref _tasks); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'UnitAndAccountEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(UnitAndAccountEntity))]
		public virtual EntityCollection<UnitAndAccountEntity> UnitAndAccounts { get { return GetOrCreateEntityCollection<UnitAndAccountEntity, UnitAndAccountEntityFactory>("Account", true, false, ref _unitAndAccounts); } }
		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END


	}
}

namespace TestLLBL
{
	public enum AccountFieldIndex
	{
		///<summary>Avatar. </summary>
		Avatar,
		///<summary>CreatedDate. </summary>
		CreatedDate,
		///<summary>DisplayName. </summary>
		DisplayName,
		///<summary>Email. </summary>
		Email,
		///<summary>Id. </summary>
		Id,
		///<summary>Password. </summary>
		Password,
		///<summary>Username. </summary>
		Username,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace TestLLBL.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Account. </summary>
	public partial class AccountRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between AccountEntity and PetitionEntity over the 1:n relation they have, using the relation between the fields: Account.Id - Petition.AccountId</summary>
		public virtual IEntityRelation PetitionEntityUsingAccountId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Petitions", true, new[] { AccountFields.Id, PetitionFields.AccountId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between AccountEntity and ProjectEntity over the 1:n relation they have, using the relation between the fields: Account.Id - Project.AccountId</summary>
		public virtual IEntityRelation ProjectEntityUsingAccountId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Projects", true, new[] { AccountFields.Id, ProjectFields.AccountId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between AccountEntity and TaskEntity over the 1:n relation they have, using the relation between the fields: Account.Id - Task.AccountId</summary>
		public virtual IEntityRelation TaskEntityUsingAccountId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Tasks", true, new[] { AccountFields.Id, TaskFields.AccountId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between AccountEntity and UnitAndAccountEntity over the 1:n relation they have, using the relation between the fields: Account.Id - UnitAndAccount.AccountId</summary>
		public virtual IEntityRelation UnitAndAccountEntityUsingAccountId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "UnitAndAccounts", true, new[] { AccountFields.Id, UnitAndAccountFields.AccountId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticAccountRelations
	{
		internal static readonly IEntityRelation PetitionEntityUsingAccountIdStatic = new AccountRelations().PetitionEntityUsingAccountId;
		internal static readonly IEntityRelation ProjectEntityUsingAccountIdStatic = new AccountRelations().ProjectEntityUsingAccountId;
		internal static readonly IEntityRelation TaskEntityUsingAccountIdStatic = new AccountRelations().TaskEntityUsingAccountId;
		internal static readonly IEntityRelation UnitAndAccountEntityUsingAccountIdStatic = new AccountRelations().UnitAndAccountEntityUsingAccountId;

		/// <summary>CTor</summary>
		static StaticAccountRelations() { }
	}
}

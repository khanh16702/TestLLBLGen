//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.11.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using TestLLBL.EntityClasses;
using TestLLBL.HelperClasses;
using TestLLBL.RelationClasses;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace TestLLBL.FactoryClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END


	/// <summary>general base class for the generated factories</summary>
	[Serializable]
	public partial class EntityFactoryBase2<TEntity> : EntityFactoryCore2
		where TEntity : EntityBase2, IEntity2
	{
		private readonly bool _isInHierarchy;

		/// <summary>CTor</summary>
		/// <param name="entityName">Name of the entity.</param>
		/// <param name="typeOfEntity">The type of entity.</param>
		/// <param name="isInHierarchy">If true, the entity of this factory is in an inheritance hierarchy, false otherwise</param>
		public EntityFactoryBase2(string entityName, TestLLBL.EntityType typeOfEntity, bool isInHierarchy) : base(entityName, (int)typeOfEntity)
		{
			_isInHierarchy = isInHierarchy;
		}
		
		/// <inheritdoc/>
		public override IEntityFields2 CreateFields() { return ModelInfoProviderSingleton.GetInstance().GetEntityFields(this.ForEntityName); }
		
		/// <inheritdoc/>
		public override IEntity2 CreateEntityFromEntityTypeValue(int entityTypeValue) {	return GeneralEntityFactory.Create((TestLLBL.EntityType)entityTypeValue); }

		/// <inheritdoc/>
		public override IRelationCollection CreateHierarchyRelations(string objectAlias) { return ModelInfoProviderSingleton.GetInstance().GetHierarchyRelations(this.ForEntityName, objectAlias); }

		/// <inheritdoc/>
		public override IEntityFactory2 GetEntityFactory(object[] fieldValues, Dictionary<string, int> entityFieldStartIndexesPerEntity) 
		{
			return (IEntityFactory2)ModelInfoProviderSingleton.GetInstance().GetEntityFactory(this.ForEntityName, fieldValues, entityFieldStartIndexesPerEntity) ?? this;
		}
		
		/// <inheritdoc/>
		public override IPredicateExpression GetEntityTypeFilter(bool negate, string objectAlias) {	return ModelInfoProviderSingleton.GetInstance().GetEntityTypeFilter(this.ForEntityName, objectAlias, negate);	}
						
		/// <inheritdoc/>
		public override IEntityCollection2 CreateEntityCollection()	{ return new EntityCollection<TEntity>(this); }
		
		/// <inheritdoc/>
		public override IEntityFields2 CreateHierarchyFields() 
		{
			return _isInHierarchy ? new EntityFields2(ModelInfoProviderSingleton.GetInstance().GetHierarchyFields(this.ForEntityName), ModelInfoProviderSingleton.GetInstance(), null) : base.CreateHierarchyFields();
		}
		
		/// <inheritdoc/>
		protected override Type ForEntityType { get { return typeof(TEntity); } }
	}

	/// <summary>Factory to create new, empty AccountEntity objects.</summary>
	[Serializable]
	public partial class AccountEntityFactory : EntityFactoryBase2<AccountEntity> 
	{
		/// <summary>CTor</summary>
		public AccountEntityFactory() : base("AccountEntity", TestLLBL.EntityType.AccountEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new AccountEntity(fields); }
	}

	/// <summary>Factory to create new, empty PetitionEntity objects.</summary>
	[Serializable]
	public partial class PetitionEntityFactory : EntityFactoryBase2<PetitionEntity> 
	{
		/// <summary>CTor</summary>
		public PetitionEntityFactory() : base("PetitionEntity", TestLLBL.EntityType.PetitionEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new PetitionEntity(fields); }
	}

	/// <summary>Factory to create new, empty PetitionStatusEntity objects.</summary>
	[Serializable]
	public partial class PetitionStatusEntityFactory : EntityFactoryBase2<PetitionStatusEntity> 
	{
		/// <summary>CTor</summary>
		public PetitionStatusEntityFactory() : base("PetitionStatusEntity", TestLLBL.EntityType.PetitionStatusEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new PetitionStatusEntity(fields); }
	}

	/// <summary>Factory to create new, empty PlanEntity objects.</summary>
	[Serializable]
	public partial class PlanEntityFactory : EntityFactoryBase2<PlanEntity> 
	{
		/// <summary>CTor</summary>
		public PlanEntityFactory() : base("PlanEntity", TestLLBL.EntityType.PlanEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new PlanEntity(fields); }
	}

	/// <summary>Factory to create new, empty PlanDetailEntity objects.</summary>
	[Serializable]
	public partial class PlanDetailEntityFactory : EntityFactoryBase2<PlanDetailEntity> 
	{
		/// <summary>CTor</summary>
		public PlanDetailEntityFactory() : base("PlanDetailEntity", TestLLBL.EntityType.PlanDetailEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new PlanDetailEntity(fields); }
	}

	/// <summary>Factory to create new, empty ProjectEntity objects.</summary>
	[Serializable]
	public partial class ProjectEntityFactory : EntityFactoryBase2<ProjectEntity> 
	{
		/// <summary>CTor</summary>
		public ProjectEntityFactory() : base("ProjectEntity", TestLLBL.EntityType.ProjectEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new ProjectEntity(fields); }
	}

	/// <summary>Factory to create new, empty RatingTypeEntity objects.</summary>
	[Serializable]
	public partial class RatingTypeEntityFactory : EntityFactoryBase2<RatingTypeEntity> 
	{
		/// <summary>CTor</summary>
		public RatingTypeEntityFactory() : base("RatingTypeEntity", TestLLBL.EntityType.RatingTypeEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new RatingTypeEntity(fields); }
	}

	/// <summary>Factory to create new, empty TaskEntity objects.</summary>
	[Serializable]
	public partial class TaskEntityFactory : EntityFactoryBase2<TaskEntity> 
	{
		/// <summary>CTor</summary>
		public TaskEntityFactory() : base("TaskEntity", TestLLBL.EntityType.TaskEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new TaskEntity(fields); }
	}

	/// <summary>Factory to create new, empty TaskStatusEntity objects.</summary>
	[Serializable]
	public partial class TaskStatusEntityFactory : EntityFactoryBase2<TaskStatusEntity> 
	{
		/// <summary>CTor</summary>
		public TaskStatusEntityFactory() : base("TaskStatusEntity", TestLLBL.EntityType.TaskStatusEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new TaskStatusEntity(fields); }
	}

	/// <summary>Factory to create new, empty TaskTypeEntity objects.</summary>
	[Serializable]
	public partial class TaskTypeEntityFactory : EntityFactoryBase2<TaskTypeEntity> 
	{
		/// <summary>CTor</summary>
		public TaskTypeEntityFactory() : base("TaskTypeEntity", TestLLBL.EntityType.TaskTypeEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new TaskTypeEntity(fields); }
	}

	/// <summary>Factory to create new, empty UnitEntity objects.</summary>
	[Serializable]
	public partial class UnitEntityFactory : EntityFactoryBase2<UnitEntity> 
	{
		/// <summary>CTor</summary>
		public UnitEntityFactory() : base("UnitEntity", TestLLBL.EntityType.UnitEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new UnitEntity(fields); }
	}

	/// <summary>Factory to create new, empty UnitAndAccountEntity objects.</summary>
	[Serializable]
	public partial class UnitAndAccountEntityFactory : EntityFactoryBase2<UnitAndAccountEntity> 
	{
		/// <summary>CTor</summary>
		public UnitAndAccountEntityFactory() : base("UnitAndAccountEntity", TestLLBL.EntityType.UnitAndAccountEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new UnitAndAccountEntity(fields); }
	}

	/// <summary>Factory to create new, empty UnitTypeEntity objects.</summary>
	[Serializable]
	public partial class UnitTypeEntityFactory : EntityFactoryBase2<UnitTypeEntity> 
	{
		/// <summary>CTor</summary>
		public UnitTypeEntityFactory() : base("UnitTypeEntity", TestLLBL.EntityType.UnitTypeEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new UnitTypeEntity(fields); }
	}

	/// <summary>Factory to create new, empty Entity objects based on the entity type specified. Uses  entity specific factory objects</summary>
	[Serializable]
	public partial class GeneralEntityFactory
	{
		/// <summary>Creates a new, empty Entity object of the type specified</summary>
		/// <param name="entityTypeToCreate">The entity type to create.</param>
		/// <returns>A new, empty Entity object.</returns>
		public static IEntity2 Create(TestLLBL.EntityType entityTypeToCreate)
		{
			var factoryToUse = EntityFactoryFactory.GetFactory(entityTypeToCreate);
			IEntity2 toReturn = null;
			if(factoryToUse != null)
			{
				toReturn = factoryToUse.Create();
			}
			return toReturn;
		}		
	}
		
	/// <summary>Class which is used to obtain the entity factory based on the .NET type of the entity. </summary>
	[Serializable]
	public static class EntityFactoryFactory
	{
		private static Dictionary<Type, IEntityFactory2> _factoryPerType = new Dictionary<Type, IEntityFactory2>();

		/// <summary>Initializes the <see cref="EntityFactoryFactory"/> class.</summary>
		static EntityFactoryFactory()
		{
			foreach(int entityTypeValue in Enum.GetValues(typeof(TestLLBL.EntityType)))
			{
				var factory = GetFactory((TestLLBL.EntityType)entityTypeValue);
				_factoryPerType.Add(factory.ForEntityType ?? factory.Create().GetType(), factory);
			}
		}

		/// <summary>Gets the factory of the entity with the .NET type specified</summary>
		/// <param name="typeOfEntity">The type of entity.</param>
		/// <returns>factory to use or null if not found</returns>
		public static IEntityFactory2 GetFactory(Type typeOfEntity) { return _factoryPerType.GetValue(typeOfEntity); }

		/// <summary>Gets the factory of the entity with the TestLLBL.EntityType specified</summary>
		/// <param name="typeOfEntity">The type of entity.</param>
		/// <returns>factory to use or null if not found</returns>
		public static IEntityFactory2 GetFactory(TestLLBL.EntityType typeOfEntity)
		{
			switch(typeOfEntity)
			{
				case TestLLBL.EntityType.AccountEntity:
					return new AccountEntityFactory();
				case TestLLBL.EntityType.PetitionEntity:
					return new PetitionEntityFactory();
				case TestLLBL.EntityType.PetitionStatusEntity:
					return new PetitionStatusEntityFactory();
				case TestLLBL.EntityType.PlanEntity:
					return new PlanEntityFactory();
				case TestLLBL.EntityType.PlanDetailEntity:
					return new PlanDetailEntityFactory();
				case TestLLBL.EntityType.ProjectEntity:
					return new ProjectEntityFactory();
				case TestLLBL.EntityType.RatingTypeEntity:
					return new RatingTypeEntityFactory();
				case TestLLBL.EntityType.TaskEntity:
					return new TaskEntityFactory();
				case TestLLBL.EntityType.TaskStatusEntity:
					return new TaskStatusEntityFactory();
				case TestLLBL.EntityType.TaskTypeEntity:
					return new TaskTypeEntityFactory();
				case TestLLBL.EntityType.UnitEntity:
					return new UnitEntityFactory();
				case TestLLBL.EntityType.UnitAndAccountEntity:
					return new UnitAndAccountEntityFactory();
				case TestLLBL.EntityType.UnitTypeEntity:
					return new UnitTypeEntityFactory();
				default:
					return null;
			}
		}
	}
		
	/// <summary>Element creator for creating project elements from somewhere else, like inside Linq providers.</summary>
	public class ElementCreator : ElementCreatorBase, IElementCreator2
	{
		/// <summary>Gets the factory of the Entity type with the TestLLBL.EntityType value passed in</summary>
		/// <param name="entityTypeValue">The entity type value.</param>
		/// <returns>the entity factory of the entity type or null if not found</returns>
		public IEntityFactory2 GetFactory(int entityTypeValue) { return (IEntityFactory2)this.GetFactoryImpl(entityTypeValue); }
		
		/// <summary>Gets the factory of the Entity type with the .NET type passed in</summary>
		/// <param name="typeOfEntity">The type of entity.</param>
		/// <returns>the entity factory of the entity type or null if not found</returns>
		public IEntityFactory2 GetFactory(Type typeOfEntity) { return (IEntityFactory2)this.GetFactoryImpl(typeOfEntity); }

		/// <summary>Creates a new resultset fields object with the number of field slots reserved as specified</summary>
		/// <param name="numberOfFields">The number of fields.</param>
		/// <returns>ready to use resultsetfields object</returns>
		public IEntityFields2 CreateResultsetFields(int numberOfFields) { return new ResultsetFields(numberOfFields); }
		
		/// <inheritdoc/>
		public override IInheritanceInfoProvider ObtainInheritanceInfoProviderInstance() { return ModelInfoProviderSingleton.GetInstance(); }

		/// <inheritdoc/>
		public override IDynamicRelation CreateDynamicRelation(DerivedTableDefinition leftOperand) { return new DynamicRelation(leftOperand); }

		/// <inheritdoc/>
		public override IDynamicRelation CreateDynamicRelation(DerivedTableDefinition leftOperand, JoinHint joinType, DerivedTableDefinition rightOperand, IPredicate onClause)
		{
			return new DynamicRelation(leftOperand, joinType, rightOperand, onClause);
		}

		/// <inheritdoc/>
		public override IDynamicRelation CreateDynamicRelation(IEntityFieldCore leftOperand, JoinHint joinType, DerivedTableDefinition rightOperand, string aliasLeftOperand, IPredicate onClause)
		{
			return new DynamicRelation(leftOperand, joinType, rightOperand, aliasLeftOperand, onClause);
		}

		/// <inheritdoc/>
		public override IDynamicRelation CreateDynamicRelation(DerivedTableDefinition leftOperand, JoinHint joinType, string rightOperandEntityName, string aliasRightOperand, IPredicate onClause)
		{
			return new DynamicRelation(leftOperand, joinType, (TestLLBL.EntityType)Enum.Parse(typeof(TestLLBL.EntityType), rightOperandEntityName, false), aliasRightOperand, onClause);
		}

		/// <inheritdoc/>
		public override IDynamicRelation CreateDynamicRelation(string leftOperandEntityName, JoinHint joinType, string rightOperandEntityName, string aliasLeftOperand, string aliasRightOperand, IPredicate onClause)
		{
			return new DynamicRelation((TestLLBL.EntityType)Enum.Parse(typeof(TestLLBL.EntityType), leftOperandEntityName, false), joinType, (TestLLBL.EntityType)Enum.Parse(typeof(TestLLBL.EntityType), rightOperandEntityName, false), aliasLeftOperand, aliasRightOperand, onClause);
		}
		
		/// <inheritdoc/>
		public override IDynamicRelation CreateDynamicRelation(IEntityFieldCore leftOperand, JoinHint joinType, string rightOperandEntityName, string aliasLeftOperand, string aliasRightOperand, IPredicate onClause)
		{
			return new DynamicRelation(leftOperand, joinType, (TestLLBL.EntityType)Enum.Parse(typeof(TestLLBL.EntityType), rightOperandEntityName, false), aliasLeftOperand, aliasRightOperand, onClause);
		}
		
		/// <inheritdoc/>
		protected override IEntityFactoryCore GetFactoryImpl(int entityTypeValue) { return EntityFactoryFactory.GetFactory((TestLLBL.EntityType)entityTypeValue); }

		/// <inheritdoc/>
		protected override IEntityFactoryCore GetFactoryImpl(Type typeOfEntity) { return EntityFactoryFactory.GetFactory(typeOfEntity);	}

	}
}
